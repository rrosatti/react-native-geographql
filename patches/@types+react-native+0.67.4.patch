diff --git a/node_modules/@types/react-native/globals.d.ts b/node_modules/@types/react-native/globals.d.ts
index 8b41056..5f96e22 100755
--- a/node_modules/@types/react-native/globals.d.ts
+++ b/node_modules/@types/react-native/globals.d.ts
@@ -397,55 +397,55 @@ interface AbortEvent extends Event {
     type: 'abort';
 }
 
-declare class AbortSignal implements EventTarget {
-    /**
-     * AbortSignal cannot be constructed directly.
-     */
-    constructor();
-    /**
-     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
-     */
-    readonly aborted: boolean;
-
-    onabort: (event: AbortEvent) => void;
-
-    addEventListener: (
-        type: 'abort',
-        listener: (this: AbortSignal, event: any) => any,
-        options?:
-            | boolean
-            | {
-                  capture?: boolean;
-                  once?: boolean;
-                  passive?: boolean;
-              },
-    ) => void;
-
-    removeEventListener: (
-        type: 'abort',
-        listener: (this: AbortSignal, event: any) => any,
-        options?:
-            | boolean
-            | {
-                  capture?: boolean;
-              },
-    ) => void;
-}
-
-declare class AbortController {
-    /**
-     * Initialize this controller.
-     */
-    constructor();
-    /**
-     * Returns the `AbortSignal` object associated with this object.
-     */
-    readonly signal: AbortSignal;
-    /**
-     * Abort and signal to any observers that the associated activity is to be aborted.
-     */
-    abort(): void;
-}
+// declare class AbortSignal implements EventTarget {
+//     /**
+//      * AbortSignal cannot be constructed directly.
+//      */
+//     constructor();
+//     /**
+//      * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
+//      */
+//     readonly aborted: boolean;
+
+//     onabort: (event: AbortEvent) => void;
+
+//     addEventListener: (
+//         type: 'abort',
+//         listener: (this: AbortSignal, event: any) => any,
+//         options?:
+//             | boolean
+//             | {
+//                   capture?: boolean;
+//                   once?: boolean;
+//                   passive?: boolean;
+//               },
+//     ) => void;
+
+//     removeEventListener: (
+//         type: 'abort',
+//         listener: (this: AbortSignal, event: any) => any,
+//         options?:
+//             | boolean
+//             | {
+//                   capture?: boolean;
+//               },
+//     ) => void;
+// }
+
+// declare class AbortController {
+//     /**
+//      * Initialize this controller.
+//      */
+//     constructor();
+//     /**
+//      * Returns the `AbortSignal` object associated with this object.
+//      */
+//     readonly signal: AbortSignal;
+//     /**
+//      * Abort and signal to any observers that the associated activity is to be aborted.
+//      */
+//     abort(): void;
+// }
 
 interface FileReaderEventMap {
     abort: ProgressEvent<FileReader>;
